;buildInfoPackage: chisel3, version: 3.4.3, scalaVersion: 2.12.12, sbtVersion: 1.3.10
circuit Top : 
  module pc : 
    input clock : Clock
    input reset : Reset
    output io : {flip input : UInt<32>, pc4 : UInt<32>, pc : UInt<32>}
    
    reg reg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[pc.scala 10:26]
    reg <= io.input @[pc.scala 11:9]
    node _io_pc4_T = add(reg, UInt<3>("h04")) @[pc.scala 12:23]
    node _io_pc4_T_1 = tail(_io_pc4_T, 1) @[pc.scala 12:23]
    io.pc4 <= _io_pc4_T_1 @[pc.scala 12:16]
    io.pc <= reg @[pc.scala 13:15]
    
  module ALU_ : 
    input clock : Clock
    input reset : Reset
    output io : {flip in_A : SInt<32>, flip in_B : SInt<32>, flip aluc : UInt<5>, output : SInt<32>}
    
    io.output <= asSInt(UInt<1>("h00")) @[alu.scala 48:14]
    node _T = eq(io.aluc, UInt<1>("h00")) @[alu.scala 50:22]
    node _T_1 = eq(io.aluc, UInt<1>("h00")) @[alu.scala 50:44]
    node _T_2 = or(_T, _T_1) @[alu.scala 50:34]
    when _T_2 : @[alu.scala 50:58]
      node _io_output_T = add(io.in_A, io.in_B) @[alu.scala 51:38]
      node _io_output_T_1 = tail(_io_output_T, 1) @[alu.scala 51:38]
      node _io_output_T_2 = asSInt(_io_output_T_1) @[alu.scala 51:38]
      io.output <= _io_output_T_2 @[alu.scala 51:27]
      skip @[alu.scala 50:58]
    else : @[alu.scala 52:64]
      node _T_3 = eq(io.aluc, UInt<1>("h01")) @[alu.scala 52:28]
      node _T_4 = eq(io.aluc, UInt<1>("h01")) @[alu.scala 52:50]
      node _T_5 = or(_T_3, _T_4) @[alu.scala 52:40]
      when _T_5 : @[alu.scala 52:64]
        node _io_output_T_3 = bits(io.in_B, 4, 0) @[alu.scala 53:48]
        node _io_output_T_4 = dshl(io.in_A, _io_output_T_3) @[alu.scala 53:38]
        io.output <= _io_output_T_4 @[alu.scala 53:26]
        skip @[alu.scala 52:64]
      else : @[alu.scala 54:65]
        node _T_6 = eq(io.aluc, UInt<2>("h02")) @[alu.scala 54:28]
        node _T_7 = eq(io.aluc, UInt<2>("h02")) @[alu.scala 54:51]
        node _T_8 = or(_T_6, _T_7) @[alu.scala 54:40]
        when _T_8 : @[alu.scala 54:65]
          node _T_9 = lt(io.in_A, io.in_B) @[alu.scala 55:30]
          when _T_9 : @[alu.scala 55:40]
            io.output <= asSInt(UInt<2>("h01")) @[alu.scala 56:35]
            skip @[alu.scala 55:40]
          else : @[alu.scala 57:28]
            io.output <= asSInt(UInt<1>("h00")) @[alu.scala 58:35]
            skip @[alu.scala 57:28]
          skip @[alu.scala 54:65]
        else : @[alu.scala 60:65]
          node _T_10 = eq(io.aluc, UInt<2>("h03")) @[alu.scala 60:28]
          node _T_11 = eq(io.aluc, UInt<2>("h03")) @[alu.scala 60:51]
          node _T_12 = or(_T_10, _T_11) @[alu.scala 60:41]
          when _T_12 : @[alu.scala 60:65]
            node Ua = asUInt(io.in_A) @[alu.scala 61:34]
            node Ub = asUInt(io.in_B) @[alu.scala 62:34]
            node _T_13 = lt(Ua, Ub) @[alu.scala 63:25]
            when _T_13 : @[alu.scala 63:30]
              io.output <= asSInt(UInt<2>("h01")) @[alu.scala 64:35]
              skip @[alu.scala 63:30]
            else : @[alu.scala 65:28]
              io.output <= asSInt(UInt<1>("h00")) @[alu.scala 66:35]
              skip @[alu.scala 65:28]
            skip @[alu.scala 60:65]
          else : @[alu.scala 68:64]
            node _T_14 = eq(io.aluc, UInt<3>("h04")) @[alu.scala 68:28]
            node _T_15 = eq(io.aluc, UInt<3>("h04")) @[alu.scala 68:50]
            node _T_16 = or(_T_14, _T_15) @[alu.scala 68:40]
            when _T_16 : @[alu.scala 68:64]
              node _io_output_T_5 = xor(io.in_A, io.in_B) @[alu.scala 69:38]
              node _io_output_T_6 = asSInt(_io_output_T_5) @[alu.scala 69:38]
              io.output <= _io_output_T_6 @[alu.scala 69:27]
              skip @[alu.scala 68:64]
            else : @[alu.scala 70:65]
              node _T_17 = eq(io.aluc, UInt<3>("h05")) @[alu.scala 70:28]
              node _T_18 = eq(io.aluc, UInt<3>("h05")) @[alu.scala 70:51]
              node _T_19 = or(_T_17, _T_18) @[alu.scala 70:40]
              when _T_19 : @[alu.scala 70:65]
                node _shift_T = asUInt(io.in_A) @[alu.scala 72:37]
                node _shift_T_1 = bits(io.in_B, 4, 0) @[alu.scala 72:55]
                node shift = dshr(_shift_T, _shift_T_1) @[alu.scala 72:44]
                node _io_output_T_7 = asSInt(shift) @[alu.scala 73:36]
                io.output <= _io_output_T_7 @[alu.scala 73:27]
                skip @[alu.scala 70:65]
              else : @[alu.scala 74:63]
                node _T_20 = eq(io.aluc, UInt<3>("h06")) @[alu.scala 74:28]
                node _T_21 = eq(io.aluc, UInt<3>("h06")) @[alu.scala 74:50]
                node _T_22 = or(_T_20, _T_21) @[alu.scala 74:39]
                when _T_22 : @[alu.scala 74:63]
                  node _io_output_T_8 = or(io.in_A, io.in_B) @[alu.scala 75:38]
                  node _io_output_T_9 = asSInt(_io_output_T_8) @[alu.scala 75:38]
                  io.output <= _io_output_T_9 @[alu.scala 75:27]
                  skip @[alu.scala 74:63]
                else : @[alu.scala 76:65]
                  node _T_23 = eq(io.aluc, UInt<3>("h07")) @[alu.scala 76:28]
                  node _T_24 = eq(io.aluc, UInt<3>("h07")) @[alu.scala 76:51]
                  node _T_25 = or(_T_23, _T_24) @[alu.scala 76:40]
                  when _T_25 : @[alu.scala 76:65]
                    node _io_output_T_10 = and(io.in_A, io.in_B) @[alu.scala 77:38]
                    node _io_output_T_11 = asSInt(_io_output_T_10) @[alu.scala 77:38]
                    io.output <= _io_output_T_11 @[alu.scala 77:27]
                    skip @[alu.scala 76:65]
                  else : @[alu.scala 78:40]
                    node _T_26 = eq(io.aluc, UInt<4>("h08")) @[alu.scala 78:28]
                    when _T_26 : @[alu.scala 78:40]
                      node _io_output_T_12 = sub(io.in_A, io.in_B) @[alu.scala 79:38]
                      node _io_output_T_13 = tail(_io_output_T_12, 1) @[alu.scala 79:38]
                      node _io_output_T_14 = asSInt(_io_output_T_13) @[alu.scala 79:38]
                      io.output <= _io_output_T_14 @[alu.scala 79:27]
                      skip @[alu.scala 78:40]
                    else : @[alu.scala 80:64]
                      node _T_27 = eq(io.aluc, UInt<4>("h0d")) @[alu.scala 80:28]
                      node _T_28 = eq(io.aluc, UInt<3>("h05")) @[alu.scala 80:51]
                      node _T_29 = or(_T_27, _T_28) @[alu.scala 80:40]
                      when _T_29 : @[alu.scala 80:64]
                        node _io_output_T_15 = bits(io.in_B, 4, 0) @[alu.scala 81:49]
                        node _io_output_T_16 = dshr(io.in_A, _io_output_T_15) @[alu.scala 81:39]
                        io.output <= _io_output_T_16 @[alu.scala 81:27]
                        skip @[alu.scala 80:64]
                      else : @[alu.scala 82:43]
                        node _T_30 = eq(io.aluc, UInt<5>("h01f")) @[alu.scala 82:28]
                        when _T_30 : @[alu.scala 82:43]
                          io.output <= io.in_A @[alu.scala 83:27]
                          skip @[alu.scala 82:43]
    
  module alucontrol : 
    input clock : Clock
    input reset : Reset
    output io : {flip aluOp : UInt<3>, flip func3 : UInt<3>, flip func7 : UInt<1>, aluc : UInt<5>}
    
    io.aluc <= UInt<1>("h00") @[alucontrol.scala 15:17]
    node _T = eq(io.aluOp, UInt<1>("h00")) @[alucontrol.scala 17:24]
    when _T : @[alucontrol.scala 17:37]
      node io_aluc_hi = cat(UInt<1>("h00"), io.func7) @[Cat.scala 30:58]
      node _io_aluc_T = cat(io_aluc_hi, io.func3) @[Cat.scala 30:58]
      io.aluc <= _io_aluc_T @[alucontrol.scala 17:46]
      skip @[alucontrol.scala 17:37]
    else : @[alucontrol.scala 18:41]
      node _T_1 = eq(io.aluOp, UInt<1>("h01")) @[alucontrol.scala 18:27]
      when _T_1 : @[alucontrol.scala 18:41]
        node _io_aluc_T_1 = cat(UInt<1>("h00"), io.func3) @[Cat.scala 30:58]
        io.aluc <= _io_aluc_T_1 @[alucontrol.scala 18:50]
        skip @[alucontrol.scala 18:41]
      else : @[alucontrol.scala 19:64]
        node _T_2 = eq(io.aluOp, UInt<3>("h05")) @[alucontrol.scala 19:26]
        node _T_3 = eq(io.aluOp, UInt<3>("h04")) @[alucontrol.scala 19:51]
        node _T_4 = or(_T_2, _T_3) @[alucontrol.scala 19:39]
        when _T_4 : @[alucontrol.scala 19:64]
          io.aluc <= UInt<1>("h00") @[alucontrol.scala 19:73]
          skip @[alucontrol.scala 19:64]
        else : @[alucontrol.scala 20:40]
          node _T_5 = eq(io.aluOp, UInt<2>("h03")) @[alucontrol.scala 20:27]
          when _T_5 : @[alucontrol.scala 20:40]
            io.aluc <= UInt<5>("h01f") @[alucontrol.scala 20:49]
            skip @[alucontrol.scala 20:40]
          else : @[alucontrol.scala 21:40]
            node _T_6 = eq(io.aluOp, UInt<2>("h02")) @[alucontrol.scala 21:27]
            when _T_6 : @[alucontrol.scala 21:40]
              node _io_aluc_T_2 = cat(UInt<2>("h02"), io.func3) @[Cat.scala 30:58]
              io.aluc <= _io_aluc_T_2 @[alucontrol.scala 21:49]
              skip @[alucontrol.scala 21:40]
            else : @[alucontrol.scala 22:39]
              node _T_7 = eq(io.aluOp, UInt<3>("h06")) @[alucontrol.scala 22:26]
              when _T_7 : @[alucontrol.scala 22:39]
                io.aluc <= UInt<1>("h00") @[alucontrol.scala 22:48]
                skip @[alucontrol.scala 22:39]
    
  module BranchControl_ : 
    input clock : Clock
    input reset : Reset
    output io : {flip aluc : UInt<5>, flip branch : UInt<1>, flip arg_x : SInt<32>, flip arg_y : SInt<32>, br_taken : UInt<1>}
    
    io.br_taken <= UInt<1>("h00") @[branchcontrol.scala 26:13]
    node _T = eq(UInt<5>("h010"), io.aluc) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      node _T_1 = eq(io.arg_x, io.arg_y) @[branchcontrol.scala 29:16]
      when _T_1 : @[branchcontrol.scala 29:29]
        node _io_br_taken_T = and(UInt<1>("h01"), io.branch) @[branchcontrol.scala 30:24]
        io.br_taken <= _io_br_taken_T @[branchcontrol.scala 30:17]
        skip @[branchcontrol.scala 29:29]
      else : @[branchcontrol.scala 31:12]
        node _io_br_taken_T_1 = and(UInt<1>("h00"), io.branch) @[branchcontrol.scala 32:20]
        io.br_taken <= _io_br_taken_T_1 @[branchcontrol.scala 32:13]
        skip @[branchcontrol.scala 31:12]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_2 = eq(UInt<5>("h013"), io.aluc) @[Conditional.scala 37:30]
      when _T_2 : @[Conditional.scala 39:67]
        node _T_3 = neq(io.arg_x, io.arg_y) @[branchcontrol.scala 35:16]
        when _T_3 : @[branchcontrol.scala 35:29]
          node _io_br_taken_T_2 = and(UInt<1>("h01"), io.branch) @[branchcontrol.scala 36:24]
          io.br_taken <= _io_br_taken_T_2 @[branchcontrol.scala 36:17]
          skip @[branchcontrol.scala 35:29]
        else : @[branchcontrol.scala 37:12]
          node _io_br_taken_T_3 = and(UInt<1>("h00"), io.branch) @[branchcontrol.scala 38:20]
          io.br_taken <= _io_br_taken_T_3 @[branchcontrol.scala 38:13]
          skip @[branchcontrol.scala 37:12]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_4 = eq(UInt<5>("h014"), io.aluc) @[Conditional.scala 37:30]
        when _T_4 : @[Conditional.scala 39:67]
          node _T_5 = lt(io.arg_x, io.arg_y) @[branchcontrol.scala 41:16]
          when _T_5 : @[branchcontrol.scala 41:27]
            node _io_br_taken_T_4 = and(UInt<1>("h01"), io.branch) @[branchcontrol.scala 42:24]
            io.br_taken <= _io_br_taken_T_4 @[branchcontrol.scala 42:17]
            skip @[branchcontrol.scala 41:27]
          else : @[branchcontrol.scala 43:12]
            node _io_br_taken_T_5 = and(UInt<1>("h00"), io.branch) @[branchcontrol.scala 44:20]
            io.br_taken <= _io_br_taken_T_5 @[branchcontrol.scala 44:13]
            skip @[branchcontrol.scala 43:12]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_6 = eq(UInt<5>("h015"), io.aluc) @[Conditional.scala 37:30]
          when _T_6 : @[Conditional.scala 39:67]
            node _T_7 = geq(io.arg_x, io.arg_y) @[branchcontrol.scala 47:16]
            when _T_7 : @[branchcontrol.scala 47:28]
              node _io_br_taken_T_6 = and(UInt<1>("h01"), io.branch) @[branchcontrol.scala 48:24]
              io.br_taken <= _io_br_taken_T_6 @[branchcontrol.scala 48:17]
              skip @[branchcontrol.scala 47:28]
            else : @[branchcontrol.scala 49:12]
              node _io_br_taken_T_7 = and(UInt<1>("h00"), io.branch) @[branchcontrol.scala 50:19]
              io.br_taken <= _io_br_taken_T_7 @[branchcontrol.scala 50:13]
              skip @[branchcontrol.scala 49:12]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_8 = eq(UInt<5>("h016"), io.aluc) @[Conditional.scala 37:30]
            when _T_8 : @[Conditional.scala 39:67]
              node _T_9 = leq(io.arg_x, io.arg_y) @[branchcontrol.scala 53:16]
              when _T_9 : @[branchcontrol.scala 53:28]
                node _io_br_taken_T_8 = and(UInt<1>("h01"), io.branch) @[branchcontrol.scala 54:24]
                io.br_taken <= _io_br_taken_T_8 @[branchcontrol.scala 54:17]
                skip @[branchcontrol.scala 53:28]
              else : @[branchcontrol.scala 55:12]
                node _io_br_taken_T_9 = and(UInt<1>("h00"), io.branch) @[branchcontrol.scala 56:20]
                io.br_taken <= _io_br_taken_T_9 @[branchcontrol.scala 56:13]
                skip @[branchcontrol.scala 55:12]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_10 = eq(UInt<5>("h017"), io.aluc) @[Conditional.scala 37:30]
              when _T_10 : @[Conditional.scala 39:67]
                node _T_11 = geq(io.arg_x, io.arg_y) @[branchcontrol.scala 59:16]
                when _T_11 : @[branchcontrol.scala 59:28]
                  node _io_br_taken_T_10 = and(UInt<1>("h01"), io.branch) @[branchcontrol.scala 60:24]
                  io.br_taken <= _io_br_taken_T_10 @[branchcontrol.scala 60:17]
                  skip @[branchcontrol.scala 59:28]
                else : @[branchcontrol.scala 61:12]
                  node _io_br_taken_T_11 = and(UInt<1>("h00"), io.branch) @[branchcontrol.scala 62:20]
                  io.br_taken <= _io_br_taken_T_11 @[branchcontrol.scala 62:13]
                  skip @[branchcontrol.scala 61:12]
                skip @[Conditional.scala 39:67]
    
  module controldec : 
    input clock : Clock
    input reset : Reset
    output io : {flip Instruction : UInt<32>, MemWrite : UInt<1>, Branch : UInt<1>, MemRead : UInt<1>, RegWrite : UInt<1>, Mem2Reg : UInt<1>, opAsel : UInt<2>, opBsel : UInt<1>, Ex_sel : UInt<2>, nextPCsel : UInt<2>, aluop : UInt<3>, vset : UInt<1>}
    
    io.MemWrite <= UInt<1>("h00") @[controldecoder.scala 21:17]
    io.Branch <= UInt<1>("h00") @[controldecoder.scala 22:15]
    io.MemRead <= UInt<1>("h00") @[controldecoder.scala 23:16]
    io.RegWrite <= UInt<1>("h00") @[controldecoder.scala 24:17]
    io.Mem2Reg <= UInt<1>("h00") @[controldecoder.scala 25:16]
    io.opAsel <= UInt<1>("h00") @[controldecoder.scala 26:15]
    io.opBsel <= UInt<1>("h00") @[controldecoder.scala 27:15]
    io.Ex_sel <= UInt<1>("h00") @[controldecoder.scala 28:15]
    io.nextPCsel <= UInt<1>("h00") @[controldecoder.scala 29:18]
    io.aluop <= UInt<3>("h07") @[controldecoder.scala 30:14]
    io.vset <= UInt<1>("h01") @[controldecoder.scala 31:13]
    node configtype = bits(io.Instruction, 31, 30) @[controldecoder.scala 33:44]
    node opcode = bits(io.Instruction, 6, 0) @[controldecoder.scala 34:40]
    node _T = eq(UInt<6>("h033"), opcode) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      io.MemWrite <= UInt<1>("h00") @[controldecoder.scala 38:25]
      io.Branch <= UInt<1>("h00") @[controldecoder.scala 39:24]
      io.MemRead <= UInt<1>("h00") @[controldecoder.scala 40:25]
      io.RegWrite <= UInt<1>("h01") @[controldecoder.scala 41:26]
      io.Mem2Reg <= UInt<1>("h00") @[controldecoder.scala 42:25]
      io.opAsel <= UInt<1>("h00") @[controldecoder.scala 43:24]
      io.opBsel <= UInt<1>("h00") @[controldecoder.scala 44:24]
      io.Ex_sel <= UInt<1>("h00") @[controldecoder.scala 45:24]
      io.aluop <= UInt<1>("h00") @[controldecoder.scala 46:22]
      io.vset <= UInt<1>("h00") @[controldecoder.scala 47:21]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_1 = eq(UInt<5>("h013"), opcode) @[Conditional.scala 37:30]
      when _T_1 : @[Conditional.scala 39:67]
        io.MemWrite <= UInt<1>("h00") @[controldecoder.scala 51:26]
        io.Branch <= UInt<1>("h00") @[controldecoder.scala 52:24]
        io.MemRead <= UInt<1>("h00") @[controldecoder.scala 53:25]
        io.RegWrite <= UInt<1>("h01") @[controldecoder.scala 54:26]
        io.Mem2Reg <= UInt<1>("h00") @[controldecoder.scala 55:25]
        io.opAsel <= UInt<1>("h00") @[controldecoder.scala 56:24]
        io.opBsel <= UInt<1>("h01") @[controldecoder.scala 57:24]
        io.Ex_sel <= UInt<1>("h00") @[controldecoder.scala 58:24]
        io.aluop <= UInt<1>("h01") @[controldecoder.scala 59:22]
        io.vset <= UInt<1>("h00") @[controldecoder.scala 60:21]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_2 = eq(UInt<6>("h023"), opcode) @[Conditional.scala 37:30]
        when _T_2 : @[Conditional.scala 39:67]
          io.MemWrite <= UInt<1>("h01") @[controldecoder.scala 63:26]
          io.Branch <= UInt<1>("h00") @[controldecoder.scala 64:24]
          io.MemRead <= UInt<1>("h00") @[controldecoder.scala 65:25]
          io.RegWrite <= UInt<1>("h01") @[controldecoder.scala 66:26]
          io.Mem2Reg <= UInt<1>("h00") @[controldecoder.scala 67:25]
          io.opAsel <= UInt<1>("h00") @[controldecoder.scala 68:24]
          io.opBsel <= UInt<1>("h01") @[controldecoder.scala 69:24]
          io.Ex_sel <= UInt<1>("h01") @[controldecoder.scala 70:24]
          io.aluop <= UInt<3>("h05") @[controldecoder.scala 71:22]
          io.vset <= UInt<1>("h00") @[controldecoder.scala 72:21]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_3 = eq(UInt<2>("h03"), opcode) @[Conditional.scala 37:30]
          when _T_3 : @[Conditional.scala 39:67]
            io.MemWrite <= UInt<1>("h00") @[controldecoder.scala 75:26]
            io.Branch <= UInt<1>("h00") @[controldecoder.scala 76:24]
            io.MemRead <= UInt<1>("h01") @[controldecoder.scala 77:25]
            io.RegWrite <= UInt<1>("h01") @[controldecoder.scala 78:26]
            io.Mem2Reg <= UInt<1>("h01") @[controldecoder.scala 79:25]
            io.opAsel <= UInt<1>("h00") @[controldecoder.scala 80:24]
            io.opBsel <= UInt<1>("h01") @[controldecoder.scala 81:24]
            io.Ex_sel <= UInt<1>("h00") @[controldecoder.scala 82:24]
            io.aluop <= UInt<3>("h04") @[controldecoder.scala 83:22]
            io.vset <= UInt<1>("h00") @[controldecoder.scala 84:21]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_4 = eq(UInt<7>("h063"), opcode) @[Conditional.scala 37:30]
            when _T_4 : @[Conditional.scala 39:67]
              io.MemWrite <= UInt<1>("h00") @[controldecoder.scala 88:26]
              io.Branch <= UInt<1>("h01") @[controldecoder.scala 89:24]
              io.MemRead <= UInt<1>("h00") @[controldecoder.scala 90:25]
              io.RegWrite <= UInt<1>("h00") @[controldecoder.scala 91:26]
              io.Mem2Reg <= UInt<1>("h00") @[controldecoder.scala 92:25]
              io.opAsel <= UInt<1>("h00") @[controldecoder.scala 93:24]
              io.opBsel <= UInt<1>("h00") @[controldecoder.scala 94:24]
              io.Ex_sel <= UInt<1>("h00") @[controldecoder.scala 95:24]
              io.nextPCsel <= UInt<1>("h01") @[controldecoder.scala 96:26]
              io.aluop <= UInt<2>("h02") @[controldecoder.scala 97:22]
              io.vset <= UInt<1>("h00") @[controldecoder.scala 98:21]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_5 = eq(UInt<7>("h06f"), opcode) @[Conditional.scala 37:30]
              when _T_5 : @[Conditional.scala 39:67]
                io.MemWrite <= UInt<1>("h00") @[controldecoder.scala 101:26]
                io.Branch <= UInt<1>("h00") @[controldecoder.scala 102:24]
                io.MemRead <= UInt<1>("h00") @[controldecoder.scala 103:25]
                io.RegWrite <= UInt<1>("h01") @[controldecoder.scala 104:26]
                io.Mem2Reg <= UInt<1>("h00") @[controldecoder.scala 105:25]
                io.opAsel <= UInt<1>("h01") @[controldecoder.scala 106:24]
                io.opBsel <= UInt<1>("h00") @[controldecoder.scala 107:24]
                io.Ex_sel <= UInt<1>("h00") @[controldecoder.scala 108:24]
                io.nextPCsel <= UInt<2>("h02") @[controldecoder.scala 109:26]
                io.aluop <= UInt<2>("h03") @[controldecoder.scala 110:22]
                io.vset <= UInt<1>("h00") @[controldecoder.scala 111:21]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_6 = eq(UInt<7>("h067"), opcode) @[Conditional.scala 37:30]
                when _T_6 : @[Conditional.scala 39:67]
                  io.MemWrite <= UInt<1>("h00") @[controldecoder.scala 114:26]
                  io.Branch <= UInt<1>("h00") @[controldecoder.scala 115:24]
                  io.MemRead <= UInt<1>("h00") @[controldecoder.scala 116:25]
                  io.RegWrite <= UInt<1>("h01") @[controldecoder.scala 117:26]
                  io.Mem2Reg <= UInt<1>("h00") @[controldecoder.scala 118:25]
                  io.opAsel <= UInt<1>("h01") @[controldecoder.scala 119:24]
                  io.opBsel <= UInt<1>("h01") @[controldecoder.scala 120:24]
                  io.Ex_sel <= UInt<1>("h00") @[controldecoder.scala 121:24]
                  io.nextPCsel <= UInt<2>("h03") @[controldecoder.scala 122:26]
                  io.aluop <= UInt<2>("h03") @[controldecoder.scala 123:22]
                  io.vset <= UInt<1>("h00") @[controldecoder.scala 124:21]
                  skip @[Conditional.scala 39:67]
                else : @[Conditional.scala 39:67]
                  node _T_7 = eq(UInt<6>("h037"), opcode) @[Conditional.scala 37:30]
                  when _T_7 : @[Conditional.scala 39:67]
                    io.MemWrite <= UInt<1>("h00") @[controldecoder.scala 127:26]
                    io.Branch <= UInt<1>("h00") @[controldecoder.scala 128:24]
                    io.MemRead <= UInt<1>("h00") @[controldecoder.scala 129:25]
                    io.RegWrite <= UInt<1>("h01") @[controldecoder.scala 130:26]
                    io.Mem2Reg <= UInt<1>("h00") @[controldecoder.scala 131:25]
                    io.opAsel <= UInt<2>("h02") @[controldecoder.scala 132:24]
                    io.opBsel <= UInt<1>("h01") @[controldecoder.scala 133:24]
                    io.Ex_sel <= UInt<2>("h02") @[controldecoder.scala 134:24]
                    io.nextPCsel <= UInt<1>("h00") @[controldecoder.scala 135:26]
                    io.aluop <= UInt<3>("h06") @[controldecoder.scala 136:22]
                    io.vset <= UInt<1>("h00") @[controldecoder.scala 137:21]
                    skip @[Conditional.scala 39:67]
                  else : @[Conditional.scala 39:67]
                    node _T_8 = eq(UInt<7>("h057"), opcode) @[Conditional.scala 37:30]
                    when _T_8 : @[Conditional.scala 39:67]
                      io.vset <= UInt<1>("h01") @[controldecoder.scala 140:21]
                      node _T_9 = eq(configtype, UInt<1>("h00")) @[controldecoder.scala 141:30]
                      node _T_10 = eq(configtype, UInt<1>("h01")) @[controldecoder.scala 141:55]
                      node _T_11 = or(_T_9, _T_10) @[controldecoder.scala 141:41]
                      when _T_11 : @[controldecoder.scala 141:67]
                        io.RegWrite <= UInt<1>("h01") @[controldecoder.scala 142:28]
                        io.aluop <= UInt<1>("h01") @[controldecoder.scala 143:25]
                        io.opBsel <= UInt<1>("h01") @[controldecoder.scala 144:26]
                        io.MemWrite <= UInt<1>("h00") @[controldecoder.scala 145:28]
                        io.Branch <= UInt<1>("h00") @[controldecoder.scala 146:26]
                        io.MemRead <= UInt<1>("h00") @[controldecoder.scala 147:28]
                        io.Mem2Reg <= UInt<1>("h00") @[controldecoder.scala 148:27]
                        io.opAsel <= UInt<1>("h00") @[controldecoder.scala 149:26]
                        io.Ex_sel <= UInt<2>("h03") @[controldecoder.scala 150:26]
                        io.nextPCsel <= UInt<1>("h00") @[controldecoder.scala 151:29]
                        skip @[controldecoder.scala 141:67]
                      else : @[controldecoder.scala 155:45]
                        node _T_12 = eq(configtype, UInt<2>("h02")) @[controldecoder.scala 155:34]
                        when _T_12 : @[controldecoder.scala 155:45]
                          io.RegWrite <= UInt<1>("h01") @[controldecoder.scala 156:28]
                          io.aluop <= UInt<1>("h01") @[controldecoder.scala 157:25]
                          io.opBsel <= UInt<1>("h01") @[controldecoder.scala 158:26]
                          io.MemWrite <= UInt<1>("h00") @[controldecoder.scala 159:28]
                          io.Branch <= UInt<1>("h00") @[controldecoder.scala 160:26]
                          io.MemRead <= UInt<1>("h00") @[controldecoder.scala 161:28]
                          io.Mem2Reg <= UInt<1>("h00") @[controldecoder.scala 162:27]
                          io.opAsel <= UInt<1>("h00") @[controldecoder.scala 163:26]
                          io.Ex_sel <= UInt<2>("h03") @[controldecoder.scala 164:26]
                          io.nextPCsel <= UInt<1>("h00") @[controldecoder.scala 165:29]
                          skip @[controldecoder.scala 155:45]
                        else : @[controldecoder.scala 167:23]
                          io.RegWrite <= UInt<1>("h01") @[controldecoder.scala 168:28]
                          io.MemWrite <= UInt<1>("h00") @[controldecoder.scala 169:28]
                          io.Branch <= UInt<1>("h00") @[controldecoder.scala 170:26]
                          io.MemRead <= UInt<1>("h00") @[controldecoder.scala 171:28]
                          io.Mem2Reg <= UInt<1>("h00") @[controldecoder.scala 172:27]
                          io.aluop <= UInt<1>("h00") @[controldecoder.scala 173:25]
                          io.opAsel <= UInt<1>("h00") @[controldecoder.scala 174:26]
                          io.opBsel <= UInt<1>("h00") @[controldecoder.scala 175:26]
                          io.Ex_sel <= UInt<2>("h03") @[controldecoder.scala 176:26]
                          io.nextPCsel <= UInt<1>("h00") @[controldecoder.scala 177:29]
                          skip @[controldecoder.scala 167:23]
                      skip @[Conditional.scala 39:67]
    
  module datamem : 
    input clock : Clock
    input reset : Reset
    output io : {flip Addr : UInt<8>, flip Data : SInt<32>, flip MemWrite : UInt<1>, flip MemRead : UInt<1>, out : SInt<32>}
    
    cmem mem : SInt<32>[1024] @[datamemory.scala 14:22]
    node _T = eq(io.MemWrite, UInt<1>("h01")) @[datamemory.scala 15:27]
    when _T : @[datamemory.scala 15:35]
      write mport MPORT = mem[io.Addr], clock
      MPORT <= io.Data
      skip @[datamemory.scala 15:35]
    node _T_1 = eq(io.MemRead, UInt<1>("h01")) @[datamemory.scala 18:25]
    when _T_1 : @[datamemory.scala 18:33]
      read mport io_out_MPORT = mem[io.Addr], clock @[datamemory.scala 19:35]
      io.out <= io_out_MPORT @[datamemory.scala 19:24]
      skip @[datamemory.scala 18:33]
    else : @[datamemory.scala 21:20]
      io.out <= asSInt(UInt<1>("h00")) @[datamemory.scala 21:28]
      skip @[datamemory.scala 21:20]
    
  module ImmdValGen1 : 
    input clock : Clock
    input reset : Reset
    output io : {flip instruction : UInt<32>, flip pc : UInt<32>, s_imm : SInt<32>, sb_imm : SInt<32>, uj_imm : SInt<32>, u_imm : SInt<32>, i_imm : SInt<32>, z_imm : SInt<32>}
    
    node s_imm__hi = bits(io.instruction, 31, 25) @[immgen.scala 21:41]
    node s_imm__lo = bits(io.instruction, 11, 7) @[immgen.scala 21:63]
    node s_imm_ = cat(s_imm__hi, s_imm__lo) @[Cat.scala 30:58]
    node _io_s_imm_T = bits(s_imm_, 11, 11) @[immgen.scala 22:40]
    node _io_s_imm_T_1 = bits(_io_s_imm_T, 0, 0) @[Bitwise.scala 72:15]
    node io_s_imm_hi = mux(_io_s_imm_T_1, UInt<20>("h0fffff"), UInt<20>("h00")) @[Bitwise.scala 72:12]
    node _io_s_imm_T_2 = cat(io_s_imm_hi, s_imm_) @[Cat.scala 30:58]
    node _io_s_imm_T_3 = asSInt(_io_s_imm_T_2) @[immgen.scala 22:55]
    io.s_imm <= _io_s_imm_T_3 @[immgen.scala 22:18]
    node sb_imm__hi_hi_hi = bits(io.instruction, 31, 31) @[immgen.scala 24:42]
    node sb_imm__hi_hi_lo = bits(io.instruction, 7, 7) @[immgen.scala 24:61]
    node sb_imm__hi_lo = bits(io.instruction, 30, 25) @[immgen.scala 24:79]
    node sb_imm__lo_hi = bits(io.instruction, 11, 8) @[immgen.scala 24:101]
    node sb_imm__lo = cat(sb_imm__lo_hi, UInt<1>("h00")) @[Cat.scala 30:58]
    node sb_imm__hi_hi = cat(sb_imm__hi_hi_hi, sb_imm__hi_hi_lo) @[Cat.scala 30:58]
    node sb_imm__hi = cat(sb_imm__hi_hi, sb_imm__hi_lo) @[Cat.scala 30:58]
    node sb_imm_ = cat(sb_imm__hi, sb_imm__lo) @[Cat.scala 30:58]
    node _io_sb_imm_T = bits(sb_imm_, 12, 12) @[immgen.scala 25:43]
    node _io_sb_imm_T_1 = bits(_io_sb_imm_T, 0, 0) @[Bitwise.scala 72:15]
    node io_sb_imm_hi = mux(_io_sb_imm_T_1, UInt<19>("h07ffff"), UInt<19>("h00")) @[Bitwise.scala 72:12]
    node _io_sb_imm_T_2 = cat(io_sb_imm_hi, sb_imm_) @[Cat.scala 30:58]
    node _io_sb_imm_T_3 = add(_io_sb_imm_T_2, io.pc) @[immgen.scala 25:59]
    node _io_sb_imm_T_4 = tail(_io_sb_imm_T_3, 1) @[immgen.scala 25:59]
    node _io_sb_imm_T_5 = asSInt(_io_sb_imm_T_4) @[immgen.scala 25:68]
    io.sb_imm <= _io_sb_imm_T_5 @[immgen.scala 25:19]
    node uj_imm__hi_hi_hi = bits(io.instruction, 31, 31) @[immgen.scala 27:42]
    node uj_imm__hi_hi_lo = bits(io.instruction, 19, 12) @[immgen.scala 27:61]
    node uj_imm__hi_lo = bits(io.instruction, 20, 20) @[immgen.scala 27:83]
    node uj_imm__lo_hi = bits(io.instruction, 30, 21) @[immgen.scala 27:102]
    node uj_imm__lo = cat(uj_imm__lo_hi, UInt<1>("h00")) @[Cat.scala 30:58]
    node uj_imm__hi_hi = cat(uj_imm__hi_hi_hi, uj_imm__hi_hi_lo) @[Cat.scala 30:58]
    node uj_imm__hi = cat(uj_imm__hi_hi, uj_imm__hi_lo) @[Cat.scala 30:58]
    node uj_imm_ = cat(uj_imm__hi, uj_imm__lo) @[Cat.scala 30:58]
    node _io_uj_imm_T = bits(uj_imm_, 20, 20) @[immgen.scala 28:43]
    node _io_uj_imm_T_1 = bits(_io_uj_imm_T, 0, 0) @[Bitwise.scala 72:15]
    node io_uj_imm_hi = mux(_io_uj_imm_T_1, UInt<12>("h0fff"), UInt<12>("h00")) @[Bitwise.scala 72:12]
    node _io_uj_imm_T_2 = cat(io_uj_imm_hi, uj_imm_) @[Cat.scala 30:58]
    node _io_uj_imm_T_3 = add(_io_uj_imm_T_2, io.pc) @[immgen.scala 28:59]
    node _io_uj_imm_T_4 = tail(_io_uj_imm_T_3, 1) @[immgen.scala 28:59]
    node _io_uj_imm_T_5 = asSInt(_io_uj_imm_T_4) @[immgen.scala 28:68]
    io.uj_imm <= _io_uj_imm_T_5 @[immgen.scala 28:19]
    node _io_u_imm_T = bits(io.instruction, 31, 31) @[immgen.scala 30:50]
    node _io_u_imm_T_1 = bits(_io_u_imm_T, 0, 0) @[Bitwise.scala 72:15]
    node io_u_imm_hi = mux(_io_u_imm_T_1, UInt<12>("h0fff"), UInt<12>("h00")) @[Bitwise.scala 72:12]
    node io_u_imm_lo = bits(io.instruction, 31, 12) @[immgen.scala 30:70]
    node _io_u_imm_T_2 = cat(io_u_imm_hi, io_u_imm_lo) @[Cat.scala 30:58]
    node _io_u_imm_T_3 = shl(_io_u_imm_T_2, 12) @[immgen.scala 30:80]
    node _io_u_imm_T_4 = add(_io_u_imm_T_3, io.pc) @[immgen.scala 30:86]
    node _io_u_imm_T_5 = tail(_io_u_imm_T_4, 1) @[immgen.scala 30:86]
    node _io_u_imm_T_6 = asSInt(_io_u_imm_T_5) @[immgen.scala 30:94]
    io.u_imm <= _io_u_imm_T_6 @[immgen.scala 30:18]
    node _io_i_imm_T = bits(io.instruction, 31, 31) @[immgen.scala 32:48]
    node _io_i_imm_T_1 = bits(_io_i_imm_T, 0, 0) @[Bitwise.scala 72:15]
    node io_i_imm_hi = mux(_io_i_imm_T_1, UInt<20>("h0fffff"), UInt<20>("h00")) @[Bitwise.scala 72:12]
    node io_i_imm_lo = bits(io.instruction, 31, 20) @[immgen.scala 32:68]
    node _io_i_imm_T_2 = cat(io_i_imm_hi, io_i_imm_lo) @[Cat.scala 30:58]
    node _io_i_imm_T_3 = asSInt(_io_i_imm_T_2) @[immgen.scala 32:78]
    io.i_imm <= _io_i_imm_T_3 @[immgen.scala 32:18]
    node _io_z_imm_T = bits(io.instruction, 30, 30) @[immgen.scala 34:47]
    node _io_z_imm_T_1 = bits(_io_z_imm_T, 0, 0) @[Bitwise.scala 72:15]
    node io_z_imm_hi = mux(_io_z_imm_T_1, UInt<21>("h01fffff"), UInt<21>("h00")) @[Bitwise.scala 72:12]
    node io_z_imm_lo = bits(io.instruction, 30, 20) @[immgen.scala 34:67]
    node _io_z_imm_T_2 = cat(io_z_imm_hi, io_z_imm_lo) @[Cat.scala 30:58]
    node _io_z_imm_T_3 = asSInt(_io_z_imm_T_2) @[immgen.scala 34:77]
    io.z_imm <= _io_z_imm_T_3 @[immgen.scala 34:17]
    
  module InstMem : 
    input clock : Clock
    input reset : Reset
    output io : {flip addr : UInt<10>, inst : UInt<32>}
    
    cmem imemm : UInt<32>[1024] @[instmemory.scala 13:17]
    read mport io_inst_MPORT = imemm[io.addr], clock @[instmemory.scala 16:22]
    io.inst <= io_inst_MPORT @[instmemory.scala 16:9]
    
  module jalr : 
    input clock : Clock
    input reset : Reset
    output io : {flip rs1 : SInt<32>, flip imm : SInt<32>, out : SInt<32>}
    
    node _a_T = add(io.rs1, io.imm) @[jalr.scala 11:24]
    node _a_T_1 = tail(_a_T, 1) @[jalr.scala 11:24]
    node a = asSInt(_a_T_1) @[jalr.scala 11:24]
    node _io_out_T = and(a, asSInt(UInt<33>("h0fffffffe"))) @[jalr.scala 12:21]
    node _io_out_T_1 = asSInt(_io_out_T) @[jalr.scala 12:21]
    io.out <= _io_out_T_1 @[jalr.scala 12:16]
    
  module regfile : 
    input clock : Clock
    input reset : Reset
    output io : {flip RegWrite : UInt<1>, flip rs1 : UInt<5>, flip rs2 : UInt<5>, flip rd : UInt<5>, flip WriteData : SInt<32>, rdata1 : SInt<32>, rdata2 : SInt<32>}
    
    wire _register_WIRE : SInt<32>[32] @[registerfile.scala 16:39]
    _register_WIRE[0] <= asSInt(UInt<32>("h00")) @[registerfile.scala 16:39]
    _register_WIRE[1] <= asSInt(UInt<32>("h00")) @[registerfile.scala 16:39]
    _register_WIRE[2] <= asSInt(UInt<32>("h00")) @[registerfile.scala 16:39]
    _register_WIRE[3] <= asSInt(UInt<32>("h00")) @[registerfile.scala 16:39]
    _register_WIRE[4] <= asSInt(UInt<32>("h00")) @[registerfile.scala 16:39]
    _register_WIRE[5] <= asSInt(UInt<32>("h00")) @[registerfile.scala 16:39]
    _register_WIRE[6] <= asSInt(UInt<32>("h00")) @[registerfile.scala 16:39]
    _register_WIRE[7] <= asSInt(UInt<32>("h00")) @[registerfile.scala 16:39]
    _register_WIRE[8] <= asSInt(UInt<32>("h00")) @[registerfile.scala 16:39]
    _register_WIRE[9] <= asSInt(UInt<32>("h00")) @[registerfile.scala 16:39]
    _register_WIRE[10] <= asSInt(UInt<32>("h00")) @[registerfile.scala 16:39]
    _register_WIRE[11] <= asSInt(UInt<32>("h00")) @[registerfile.scala 16:39]
    _register_WIRE[12] <= asSInt(UInt<32>("h00")) @[registerfile.scala 16:39]
    _register_WIRE[13] <= asSInt(UInt<32>("h00")) @[registerfile.scala 16:39]
    _register_WIRE[14] <= asSInt(UInt<32>("h00")) @[registerfile.scala 16:39]
    _register_WIRE[15] <= asSInt(UInt<32>("h00")) @[registerfile.scala 16:39]
    _register_WIRE[16] <= asSInt(UInt<32>("h00")) @[registerfile.scala 16:39]
    _register_WIRE[17] <= asSInt(UInt<32>("h00")) @[registerfile.scala 16:39]
    _register_WIRE[18] <= asSInt(UInt<32>("h00")) @[registerfile.scala 16:39]
    _register_WIRE[19] <= asSInt(UInt<32>("h00")) @[registerfile.scala 16:39]
    _register_WIRE[20] <= asSInt(UInt<32>("h00")) @[registerfile.scala 16:39]
    _register_WIRE[21] <= asSInt(UInt<32>("h00")) @[registerfile.scala 16:39]
    _register_WIRE[22] <= asSInt(UInt<32>("h00")) @[registerfile.scala 16:39]
    _register_WIRE[23] <= asSInt(UInt<32>("h00")) @[registerfile.scala 16:39]
    _register_WIRE[24] <= asSInt(UInt<32>("h00")) @[registerfile.scala 16:39]
    _register_WIRE[25] <= asSInt(UInt<32>("h00")) @[registerfile.scala 16:39]
    _register_WIRE[26] <= asSInt(UInt<32>("h00")) @[registerfile.scala 16:39]
    _register_WIRE[27] <= asSInt(UInt<32>("h00")) @[registerfile.scala 16:39]
    _register_WIRE[28] <= asSInt(UInt<32>("h00")) @[registerfile.scala 16:39]
    _register_WIRE[29] <= asSInt(UInt<32>("h00")) @[registerfile.scala 16:39]
    _register_WIRE[30] <= asSInt(UInt<32>("h00")) @[registerfile.scala 16:39]
    _register_WIRE[31] <= asSInt(UInt<32>("h00")) @[registerfile.scala 16:39]
    reg register : SInt<32>[32], clock with : (reset => (reset, _register_WIRE)) @[registerfile.scala 16:31]
    register[0] <= asSInt(UInt<1>("h00")) @[registerfile.scala 17:21]
    io.rdata1 <= register[io.rs1] @[registerfile.scala 18:19]
    io.rdata2 <= register[io.rs2] @[registerfile.scala 19:19]
    node _T = eq(io.RegWrite, UInt<1>("h01")) @[registerfile.scala 20:26]
    when _T : @[registerfile.scala 20:34]
      node _T_1 = neq(io.rd, UInt<1>("h00")) @[registerfile.scala 21:28]
      when _T_1 : @[registerfile.scala 21:43]
        register[io.rd] <= io.WriteData @[registerfile.scala 21:60]
        skip @[registerfile.scala 21:43]
      else : @[registerfile.scala 22:28]
        register[io.rd] <= asSInt(UInt<1>("h00")) @[registerfile.scala 22:45]
        skip @[registerfile.scala 22:28]
      skip @[registerfile.scala 20:34]
    
  module configure : 
    input clock : Clock
    input reset : Reset
    output io : {flip zimm : SInt<32>, flip rs1 : UInt<5>, flip rd : UInt<5>, flip rs1_readdata : SInt<32>, flip current_vl : SInt<32>, vl : SInt<32>, rd_out : UInt<5>}
    
    node vlmul = bits(io.zimm, 2, 0) @[configure.scala 19:24]
    node vsew = bits(io.zimm, 5, 3) @[configure.scala 20:22]
    node _T = eq(vlmul, UInt<3>("h05")) @[configure.scala 26:17]
    when _T : @[configure.scala 26:30]
      node _T_1 = eq(vsew, UInt<1>("h00")) @[configure.scala 28:20]
      when _T_1 : @[configure.scala 28:33]
        skip @[configure.scala 28:33]
      else : @[configure.scala 30:38]
        node _T_2 = eq(vsew, UInt<1>("h01")) @[configure.scala 30:25]
        when _T_2 : @[configure.scala 30:38]
          skip @[configure.scala 30:38]
        else : @[configure.scala 32:38]
          node _T_3 = eq(vsew, UInt<2>("h02")) @[configure.scala 32:25]
          when _T_3 : @[configure.scala 32:38]
            node _T_4 = shr(asSInt(UInt<2>("h01")), 2) @[configure.scala 33:26]
            skip @[configure.scala 32:38]
      skip @[configure.scala 26:30]
    else : @[configure.scala 39:35]
      node _T_5 = eq(vlmul, UInt<3>("h06")) @[configure.scala 39:22]
      when _T_5 : @[configure.scala 39:35]
        node _T_6 = eq(vsew, UInt<1>("h00")) @[configure.scala 41:20]
        when _T_6 : @[configure.scala 41:33]
          skip @[configure.scala 41:33]
        else : @[configure.scala 43:38]
          node _T_7 = eq(vsew, UInt<1>("h01")) @[configure.scala 43:25]
          when _T_7 : @[configure.scala 43:38]
            skip @[configure.scala 43:38]
          else : @[configure.scala 45:38]
            node _T_8 = eq(vsew, UInt<2>("h02")) @[configure.scala 45:25]
            when _T_8 : @[configure.scala 45:38]
              skip @[configure.scala 45:38]
        skip @[configure.scala 39:35]
      else : @[configure.scala 51:35]
        node _T_9 = eq(vlmul, UInt<3>("h07")) @[configure.scala 51:22]
        when _T_9 : @[configure.scala 51:35]
          node _T_10 = eq(vsew, UInt<1>("h00")) @[configure.scala 53:20]
          when _T_10 : @[configure.scala 53:33]
            skip @[configure.scala 53:33]
          else : @[configure.scala 55:38]
            node _T_11 = eq(vsew, UInt<1>("h01")) @[configure.scala 55:25]
            when _T_11 : @[configure.scala 55:38]
              skip @[configure.scala 55:38]
            else : @[configure.scala 57:38]
              node _T_12 = eq(vsew, UInt<2>("h02")) @[configure.scala 57:25]
              when _T_12 : @[configure.scala 57:38]
                skip @[configure.scala 57:38]
              else : @[configure.scala 59:37]
                node _T_13 = eq(vsew, UInt<2>("h03")) @[configure.scala 59:25]
                when _T_13 : @[configure.scala 59:37]
                  skip @[configure.scala 59:37]
          skip @[configure.scala 51:35]
        else : @[configure.scala 63:35]
          node _T_14 = eq(vlmul, UInt<1>("h00")) @[configure.scala 63:22]
          when _T_14 : @[configure.scala 63:35]
            node _T_15 = eq(vsew, UInt<1>("h00")) @[configure.scala 64:20]
            when _T_15 : @[configure.scala 64:33]
              skip @[configure.scala 64:33]
            else : @[configure.scala 66:38]
              node _T_16 = eq(vsew, UInt<1>("h01")) @[configure.scala 66:25]
              when _T_16 : @[configure.scala 66:38]
                skip @[configure.scala 66:38]
              else : @[configure.scala 68:38]
                node _T_17 = eq(vsew, UInt<2>("h02")) @[configure.scala 68:25]
                when _T_17 : @[configure.scala 68:38]
                  skip @[configure.scala 68:38]
                else : @[configure.scala 70:37]
                  node _T_18 = eq(vsew, UInt<2>("h03")) @[configure.scala 70:25]
                  when _T_18 : @[configure.scala 70:37]
                    skip @[configure.scala 70:37]
            skip @[configure.scala 63:35]
          else : @[configure.scala 73:35]
            node _T_19 = eq(vlmul, UInt<1>("h01")) @[configure.scala 73:22]
            when _T_19 : @[configure.scala 73:35]
              node _T_20 = eq(vsew, UInt<1>("h00")) @[configure.scala 74:20]
              when _T_20 : @[configure.scala 74:33]
                skip @[configure.scala 74:33]
              else : @[configure.scala 76:38]
                node _T_21 = eq(vsew, UInt<1>("h01")) @[configure.scala 76:25]
                when _T_21 : @[configure.scala 76:38]
                  skip @[configure.scala 76:38]
                else : @[configure.scala 78:38]
                  node _T_22 = eq(vsew, UInt<2>("h02")) @[configure.scala 78:25]
                  when _T_22 : @[configure.scala 78:38]
                    skip @[configure.scala 78:38]
                  else : @[configure.scala 80:37]
                    node _T_23 = eq(vsew, UInt<2>("h03")) @[configure.scala 80:25]
                    when _T_23 : @[configure.scala 80:37]
                      skip @[configure.scala 80:37]
              skip @[configure.scala 73:35]
            else : @[configure.scala 83:35]
              node _T_24 = eq(vlmul, UInt<2>("h02")) @[configure.scala 83:22]
              when _T_24 : @[configure.scala 83:35]
                node _T_25 = eq(vsew, UInt<1>("h00")) @[configure.scala 84:20]
                when _T_25 : @[configure.scala 84:33]
                  skip @[configure.scala 84:33]
                else : @[configure.scala 86:38]
                  node _T_26 = eq(vsew, UInt<1>("h01")) @[configure.scala 86:25]
                  when _T_26 : @[configure.scala 86:38]
                    skip @[configure.scala 86:38]
                  else : @[configure.scala 88:38]
                    node _T_27 = eq(vsew, UInt<2>("h02")) @[configure.scala 88:25]
                    when _T_27 : @[configure.scala 88:38]
                      skip @[configure.scala 88:38]
                    else : @[configure.scala 90:37]
                      node _T_28 = eq(vsew, UInt<2>("h03")) @[configure.scala 90:25]
                      when _T_28 : @[configure.scala 90:37]
                        skip @[configure.scala 90:37]
                skip @[configure.scala 83:35]
              else : @[configure.scala 93:35]
                node _T_29 = eq(vlmul, UInt<2>("h03")) @[configure.scala 93:22]
                when _T_29 : @[configure.scala 93:35]
                  node _T_30 = eq(vsew, UInt<1>("h00")) @[configure.scala 94:20]
                  when _T_30 : @[configure.scala 94:33]
                    skip @[configure.scala 94:33]
                  else : @[configure.scala 96:38]
                    node _T_31 = eq(vsew, UInt<1>("h01")) @[configure.scala 96:25]
                    when _T_31 : @[configure.scala 96:38]
                      skip @[configure.scala 96:38]
                    else : @[configure.scala 98:38]
                      node _T_32 = eq(vsew, UInt<2>("h02")) @[configure.scala 98:25]
                      when _T_32 : @[configure.scala 98:38]
                        skip @[configure.scala 98:38]
                      else : @[configure.scala 100:37]
                        node _T_33 = eq(vsew, UInt<2>("h03")) @[configure.scala 100:25]
                        when _T_33 : @[configure.scala 100:37]
                          skip @[configure.scala 100:37]
                  skip @[configure.scala 93:35]
    node _T_34 = neq(io.rs1, UInt<1>("h00")) @[configure.scala 106:18]
    when _T_34 : @[configure.scala 106:26]
      skip @[configure.scala 106:26]
    else : @[configure.scala 108:48]
      node _T_35 = neq(io.rd, UInt<1>("h00")) @[configure.scala 108:22]
      node _T_36 = eq(io.rs1, UInt<1>("h00")) @[configure.scala 108:40]
      node _T_37 = and(_T_35, _T_36) @[configure.scala 108:30]
      when _T_37 : @[configure.scala 108:48]
        node _T_38 = not(asSInt(UInt<1>("h00"))) @[configure.scala 109:14]
        node _T_39 = asSInt(_T_38) @[configure.scala 109:14]
        skip @[configure.scala 108:48]
      else : @[configure.scala 110:17]
        skip @[configure.scala 110:17]
    node _T_40 = leq(io.current_vl, asSInt(UInt<6>("h010"))) @[configure.scala 115:15]
    when _T_40 : @[configure.scala 115:25]
      io.vl <= io.current_vl @[configure.scala 116:14]
      skip @[configure.scala 115:25]
    else : @[configure.scala 117:16]
      io.vl <= asSInt(UInt<6>("h010")) @[configure.scala 118:14]
      skip @[configure.scala 117:16]
    io.rd_out <= io.rd @[configure.scala 121:10]
    
  module Top : 
    input clock : Clock
    input reset : UInt<1>
    output io : {out : UInt<32>, addr : UInt<10>}
    
    inst PCMod of pc @[top.scala 12:19]
    PCMod.clock <= clock
    PCMod.reset <= reset
    inst ALUMod of ALU_ @[top.scala 13:20]
    ALUMod.clock <= clock
    ALUMod.reset <= reset
    inst ALUcMod of alucontrol @[top.scala 14:22]
    ALUcMod.clock <= clock
    ALUcMod.reset <= reset
    inst BrcntrlMod of BranchControl_ @[top.scala 15:25]
    BrcntrlMod.clock <= clock
    BrcntrlMod.reset <= reset
    inst CntrlDecMod of controldec @[top.scala 16:26]
    CntrlDecMod.clock <= clock
    CntrlDecMod.reset <= reset
    inst datamemMod of datamem @[top.scala 17:25]
    datamemMod.clock <= clock
    datamemMod.reset <= reset
    inst ImmgenMod of ImmdValGen1 @[top.scala 18:23]
    ImmgenMod.clock <= clock
    ImmgenMod.reset <= reset
    inst instmemMod of InstMem @[top.scala 19:25]
    instmemMod.clock <= clock
    instmemMod.reset <= reset
    inst jalrCompMod of jalr @[top.scala 20:26]
    jalrCompMod.clock <= clock
    jalrCompMod.reset <= reset
    inst regfileMod of regfile @[top.scala 21:25]
    regfileMod.clock <= clock
    regfileMod.reset <= reset
    inst config of configure @[top.scala 22:19]
    config.clock <= clock
    config.reset <= reset
    PCMod.io.input <= PCMod.io.pc4 @[top.scala 24:16]
    node _instmemMod_io_addr_T = bits(PCMod.io.pc, 11, 2) @[top.scala 26:34]
    instmemMod.io.addr <= _instmemMod_io_addr_T @[top.scala 26:20]
    CntrlDecMod.io.Instruction <= instmemMod.io.inst @[top.scala 27:28]
    io.addr <= instmemMod.io.addr @[top.scala 28:9]
    regfileMod.io.RegWrite <= CntrlDecMod.io.RegWrite @[top.scala 31:24]
    node _regfileMod_io_rs1_T = bits(instmemMod.io.inst, 19, 15) @[top.scala 32:39]
    regfileMod.io.rs1 <= _regfileMod_io_rs1_T @[top.scala 32:18]
    node _regfileMod_io_rs2_T = bits(instmemMod.io.inst, 24, 20) @[top.scala 33:40]
    regfileMod.io.rs2 <= _regfileMod_io_rs2_T @[top.scala 33:19]
    node _regfileMod_io_rd_T = bits(instmemMod.io.inst, 11, 7) @[top.scala 34:37]
    regfileMod.io.rd <= _regfileMod_io_rd_T @[top.scala 34:17]
    ImmgenMod.io.instruction <= instmemMod.io.inst @[top.scala 38:26]
    ImmgenMod.io.pc <= PCMod.io.pc @[top.scala 39:17]
    ALUcMod.io.aluOp <= CntrlDecMod.io.aluop @[top.scala 42:18]
    node _ALUcMod_io_func3_T = bits(instmemMod.io.inst, 14, 12) @[top.scala 43:39]
    ALUcMod.io.func3 <= _ALUcMod_io_func3_T @[top.scala 43:18]
    node _ALUcMod_io_func7_T = bits(instmemMod.io.inst, 30, 30) @[top.scala 44:39]
    ALUcMod.io.func7 <= _ALUcMod_io_func7_T @[top.scala 44:18]
    node _ALUMod_io_in_A_T = eq(CntrlDecMod.io.opAsel, UInt<1>("h00")) @[top.scala 50:24]
    node _ALUMod_io_in_A_T_1 = eq(CntrlDecMod.io.opAsel, UInt<2>("h03")) @[top.scala 50:60]
    node _ALUMod_io_in_A_T_2 = or(_ALUMod_io_in_A_T, _ALUMod_io_in_A_T_1) @[top.scala 50:35]
    node _ALUMod_io_in_A_T_3 = eq(CntrlDecMod.io.opAsel, UInt<1>("h01")) @[top.scala 51:24]
    node _ALUMod_io_in_A_T_4 = asSInt(PCMod.io.pc4) @[top.scala 51:52]
    node _ALUMod_io_in_A_T_5 = eq(CntrlDecMod.io.opAsel, UInt<2>("h02")) @[top.scala 52:24]
    node _ALUMod_io_in_A_T_6 = asSInt(PCMod.io.pc) @[top.scala 52:51]
    node _ALUMod_io_in_A_T_7 = mux(_ALUMod_io_in_A_T_5, _ALUMod_io_in_A_T_6, asSInt(UInt<1>("h00"))) @[Mux.scala 98:16]
    node _ALUMod_io_in_A_T_8 = mux(_ALUMod_io_in_A_T_3, _ALUMod_io_in_A_T_4, _ALUMod_io_in_A_T_7) @[Mux.scala 98:16]
    node _ALUMod_io_in_A_T_9 = mux(_ALUMod_io_in_A_T_2, regfileMod.io.rdata1, _ALUMod_io_in_A_T_8) @[Mux.scala 98:16]
    ALUMod.io.in_A <= _ALUMod_io_in_A_T_9 @[top.scala 49:16]
    node _T = eq(CntrlDecMod.io.Ex_sel, UInt<1>("h00")) @[top.scala 57:28]
    node _T_1 = eq(CntrlDecMod.io.opBsel, UInt<1>("h01")) @[top.scala 57:65]
    node _T_2 = and(_T, _T_1) @[top.scala 57:40]
    when _T_2 : @[top.scala 57:73]
      ALUMod.io.in_B <= ImmgenMod.io.i_imm @[top.scala 58:32]
      skip @[top.scala 57:73]
    else : @[top.scala 59:87]
      node _T_3 = eq(CntrlDecMod.io.Ex_sel, UInt<1>("h01")) @[top.scala 59:42]
      node _T_4 = eq(CntrlDecMod.io.opBsel, UInt<1>("h01")) @[top.scala 59:79]
      node _T_5 = and(_T_3, _T_4) @[top.scala 59:54]
      when _T_5 : @[top.scala 59:87]
        ALUMod.io.in_B <= ImmgenMod.io.s_imm @[top.scala 60:32]
        skip @[top.scala 59:87]
      else : @[top.scala 61:87]
        node _T_6 = eq(CntrlDecMod.io.Ex_sel, UInt<2>("h02")) @[top.scala 61:42]
        node _T_7 = eq(CntrlDecMod.io.opBsel, UInt<1>("h01")) @[top.scala 61:79]
        node _T_8 = and(_T_6, _T_7) @[top.scala 61:54]
        when _T_8 : @[top.scala 61:87]
          ALUMod.io.in_B <= ImmgenMod.io.u_imm @[top.scala 62:32]
          skip @[top.scala 61:87]
        else : @[top.scala 63:20]
          ALUMod.io.in_B <= ImmgenMod.io.z_imm @[top.scala 64:32]
          skip @[top.scala 63:20]
    ALUMod.io.aluc <= ALUcMod.io.aluc @[top.scala 68:16]
    node _config_io_rs1_T = bits(instmemMod.io.inst, 19, 15) @[top.scala 70:51]
    config.io.rs1 <= _config_io_rs1_T @[top.scala 70:31]
    node _config_io_rd_T = bits(instmemMod.io.inst, 11, 7) @[top.scala 71:43]
    config.io.rd <= _config_io_rd_T @[top.scala 71:22]
    config.io.rs1_readdata <= regfileMod.io.rdata1 @[top.scala 72:33]
    config.io.zimm <= ALUMod.io.in_B @[top.scala 73:24]
    config.io.current_vl <= asSInt(UInt<6>("h010")) @[top.scala 74:30]
    regfileMod.io.rd <= config.io.rd_out @[top.scala 75:34]
    BrcntrlMod.io.branch <= CntrlDecMod.io.Branch @[top.scala 81:22]
    BrcntrlMod.io.arg_x <= asSInt(UInt<1>("h00")) @[top.scala 82:21]
    BrcntrlMod.io.arg_y <= asSInt(UInt<1>("h00")) @[top.scala 83:21]
    node _T_9 = eq(BrcntrlMod.io.branch, UInt<1>("h01")) @[top.scala 87:28]
    when _T_9 : @[top.scala 87:36]
      node _BrcntrlMod_io_arg_x_T = eq(CntrlDecMod.io.opAsel, UInt<1>("h00")) @[top.scala 89:24]
      node _BrcntrlMod_io_arg_x_T_1 = eq(CntrlDecMod.io.opAsel, UInt<1>("h01")) @[top.scala 90:24]
      node _BrcntrlMod_io_arg_x_T_2 = asSInt(PCMod.io.pc4) @[top.scala 90:54]
      node _BrcntrlMod_io_arg_x_T_3 = eq(CntrlDecMod.io.opAsel, UInt<2>("h02")) @[top.scala 91:24]
      node _BrcntrlMod_io_arg_x_T_4 = asSInt(PCMod.io.pc) @[top.scala 91:54]
      node _BrcntrlMod_io_arg_x_T_5 = eq(CntrlDecMod.io.opAsel, UInt<2>("h03")) @[top.scala 92:24]
      node _BrcntrlMod_io_arg_x_T_6 = mux(_BrcntrlMod_io_arg_x_T_5, regfileMod.io.rdata1, asSInt(UInt<1>("h00"))) @[Mux.scala 98:16]
      node _BrcntrlMod_io_arg_x_T_7 = mux(_BrcntrlMod_io_arg_x_T_3, _BrcntrlMod_io_arg_x_T_4, _BrcntrlMod_io_arg_x_T_6) @[Mux.scala 98:16]
      node _BrcntrlMod_io_arg_x_T_8 = mux(_BrcntrlMod_io_arg_x_T_1, _BrcntrlMod_io_arg_x_T_2, _BrcntrlMod_io_arg_x_T_7) @[Mux.scala 98:16]
      node _BrcntrlMod_io_arg_x_T_9 = mux(_BrcntrlMod_io_arg_x_T, regfileMod.io.rdata1, _BrcntrlMod_io_arg_x_T_8) @[Mux.scala 98:16]
      BrcntrlMod.io.arg_x <= _BrcntrlMod_io_arg_x_T_9 @[top.scala 88:25]
      node _T_10 = eq(CntrlDecMod.io.Ex_sel, UInt<1>("h00")) @[top.scala 96:29]
      node _T_11 = eq(CntrlDecMod.io.opBsel, UInt<1>("h01")) @[top.scala 96:66]
      node _T_12 = and(_T_10, _T_11) @[top.scala 96:41]
      when _T_12 : @[top.scala 96:74]
        BrcntrlMod.io.arg_y <= ImmgenMod.io.i_imm @[top.scala 97:37]
        skip @[top.scala 96:74]
      else : @[top.scala 98:87]
        node _T_13 = eq(CntrlDecMod.io.Ex_sel, UInt<1>("h01")) @[top.scala 98:42]
        node _T_14 = eq(CntrlDecMod.io.opBsel, UInt<1>("h01")) @[top.scala 98:79]
        node _T_15 = and(_T_13, _T_14) @[top.scala 98:54]
        when _T_15 : @[top.scala 98:87]
          BrcntrlMod.io.arg_y <= ImmgenMod.io.s_imm @[top.scala 99:37]
          skip @[top.scala 98:87]
        else : @[top.scala 100:87]
          node _T_16 = eq(CntrlDecMod.io.Ex_sel, UInt<2>("h02")) @[top.scala 100:42]
          node _T_17 = eq(CntrlDecMod.io.opBsel, UInt<1>("h01")) @[top.scala 100:79]
          node _T_18 = and(_T_16, _T_17) @[top.scala 100:54]
          when _T_18 : @[top.scala 100:87]
            BrcntrlMod.io.arg_y <= ImmgenMod.io.u_imm @[top.scala 101:37]
            skip @[top.scala 100:87]
          else : @[top.scala 102:20]
            BrcntrlMod.io.arg_y <= regfileMod.io.rdata2 @[top.scala 103:37]
            skip @[top.scala 102:20]
      skip @[top.scala 87:36]
    BrcntrlMod.io.aluc <= CntrlDecMod.io.aluop @[top.scala 107:20]
    jalrCompMod.io.rs1 <= regfileMod.io.rdata1 @[top.scala 110:20]
    jalrCompMod.io.imm <= ImmgenMod.io.i_imm @[top.scala 111:20]
    node _PCMod_io_input_T = eq(CntrlDecMod.io.nextPCsel, UInt<1>("h00")) @[top.scala 120:27]
    node _PCMod_io_input_T_1 = eq(CntrlDecMod.io.nextPCsel, UInt<1>("h01")) @[top.scala 121:27]
    node _PCMod_io_input_T_2 = asUInt(ImmgenMod.io.sb_imm) @[top.scala 121:92]
    node _PCMod_io_input_T_3 = mux(BrcntrlMod.io.br_taken, _PCMod_io_input_T_2, PCMod.io.pc4) @[top.scala 121:46]
    node _PCMod_io_input_T_4 = eq(CntrlDecMod.io.nextPCsel, UInt<2>("h02")) @[top.scala 122:27]
    node _PCMod_io_input_T_5 = asUInt(ImmgenMod.io.uj_imm) @[top.scala 122:65]
    node _PCMod_io_input_T_6 = eq(CntrlDecMod.io.nextPCsel, UInt<2>("h03")) @[top.scala 123:27]
    node _PCMod_io_input_T_7 = asUInt(jalrCompMod.io.out) @[top.scala 123:64]
    node _PCMod_io_input_T_8 = mux(_PCMod_io_input_T_6, _PCMod_io_input_T_7, UInt<1>("h00")) @[Mux.scala 98:16]
    node _PCMod_io_input_T_9 = mux(_PCMod_io_input_T_4, _PCMod_io_input_T_5, _PCMod_io_input_T_8) @[Mux.scala 98:16]
    node _PCMod_io_input_T_10 = mux(_PCMod_io_input_T_1, _PCMod_io_input_T_3, _PCMod_io_input_T_9) @[Mux.scala 98:16]
    node _PCMod_io_input_T_11 = mux(_PCMod_io_input_T, PCMod.io.pc4, _PCMod_io_input_T_10) @[Mux.scala 98:16]
    PCMod.io.input <= _PCMod_io_input_T_11 @[top.scala 119:16]
    node _datamemMod_io_Addr_T = bits(ALUMod.io.output, 9, 2) @[top.scala 127:40]
    datamemMod.io.Addr <= _datamemMod_io_Addr_T @[top.scala 127:20]
    datamemMod.io.Data <= regfileMod.io.rdata2 @[top.scala 128:20]
    datamemMod.io.MemWrite <= CntrlDecMod.io.MemWrite @[top.scala 129:24]
    datamemMod.io.MemRead <= CntrlDecMod.io.MemRead @[top.scala 130:23]
    node _regfileMod_io_WriteData_T = eq(CntrlDecMod.io.Mem2Reg, UInt<1>("h00")) @[top.scala 133:25]
    node _regfileMod_io_WriteData_T_1 = mux(CntrlDecMod.io.vset, config.io.vl, ALUMod.io.output) @[top.scala 133:41]
    node _regfileMod_io_WriteData_T_2 = eq(CntrlDecMod.io.Mem2Reg, UInt<1>("h01")) @[top.scala 134:25]
    node _regfileMod_io_WriteData_T_3 = mux(_regfileMod_io_WriteData_T_2, datamemMod.io.out, asSInt(UInt<1>("h00"))) @[Mux.scala 98:16]
    node _regfileMod_io_WriteData_T_4 = mux(_regfileMod_io_WriteData_T, _regfileMod_io_WriteData_T_1, _regfileMod_io_WriteData_T_3) @[Mux.scala 98:16]
    regfileMod.io.WriteData <= _regfileMod_io_WriteData_T_4 @[top.scala 132:25]
    io.out <= UInt<1>("h00") @[top.scala 136:8]
    
