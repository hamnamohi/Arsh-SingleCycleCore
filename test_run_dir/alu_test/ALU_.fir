;buildInfoPackage: chisel3, version: 3.4.3, scalaVersion: 2.12.12, sbtVersion: 1.3.10
circuit ALU_ : 
  module ALU_ : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip in_A : SInt<32>, flip in_B : SInt<32>, flip aluc : UInt<5>, output : SInt<32>}
    
    io.output <= asSInt(UInt<1>("h00")) @[alu.scala 48:14]
    node _T = eq(io.aluc, UInt<1>("h00")) @[alu.scala 50:22]
    node _T_1 = eq(io.aluc, UInt<1>("h00")) @[alu.scala 50:44]
    node _T_2 = or(_T, _T_1) @[alu.scala 50:34]
    when _T_2 : @[alu.scala 50:58]
      node _io_output_T = add(io.in_A, io.in_B) @[alu.scala 51:38]
      node _io_output_T_1 = tail(_io_output_T, 1) @[alu.scala 51:38]
      node _io_output_T_2 = asSInt(_io_output_T_1) @[alu.scala 51:38]
      io.output <= _io_output_T_2 @[alu.scala 51:27]
      skip @[alu.scala 50:58]
    else : @[alu.scala 52:64]
      node _T_3 = eq(io.aluc, UInt<1>("h01")) @[alu.scala 52:28]
      node _T_4 = eq(io.aluc, UInt<1>("h01")) @[alu.scala 52:50]
      node _T_5 = or(_T_3, _T_4) @[alu.scala 52:40]
      when _T_5 : @[alu.scala 52:64]
        node _io_output_T_3 = bits(io.in_B, 4, 0) @[alu.scala 53:48]
        node _io_output_T_4 = dshl(io.in_A, _io_output_T_3) @[alu.scala 53:38]
        io.output <= _io_output_T_4 @[alu.scala 53:26]
        skip @[alu.scala 52:64]
      else : @[alu.scala 54:65]
        node _T_6 = eq(io.aluc, UInt<2>("h02")) @[alu.scala 54:28]
        node _T_7 = eq(io.aluc, UInt<2>("h02")) @[alu.scala 54:51]
        node _T_8 = or(_T_6, _T_7) @[alu.scala 54:40]
        when _T_8 : @[alu.scala 54:65]
          node _T_9 = lt(io.in_A, io.in_B) @[alu.scala 55:30]
          when _T_9 : @[alu.scala 55:40]
            io.output <= asSInt(UInt<2>("h01")) @[alu.scala 56:35]
            skip @[alu.scala 55:40]
          else : @[alu.scala 57:28]
            io.output <= asSInt(UInt<1>("h00")) @[alu.scala 58:35]
            skip @[alu.scala 57:28]
          skip @[alu.scala 54:65]
        else : @[alu.scala 60:65]
          node _T_10 = eq(io.aluc, UInt<2>("h03")) @[alu.scala 60:28]
          node _T_11 = eq(io.aluc, UInt<2>("h03")) @[alu.scala 60:51]
          node _T_12 = or(_T_10, _T_11) @[alu.scala 60:41]
          when _T_12 : @[alu.scala 60:65]
            node Ua = asUInt(io.in_A) @[alu.scala 61:34]
            node Ub = asUInt(io.in_B) @[alu.scala 62:34]
            node _T_13 = lt(Ua, Ub) @[alu.scala 63:25]
            when _T_13 : @[alu.scala 63:30]
              io.output <= asSInt(UInt<2>("h01")) @[alu.scala 64:35]
              skip @[alu.scala 63:30]
            else : @[alu.scala 65:28]
              io.output <= asSInt(UInt<1>("h00")) @[alu.scala 66:35]
              skip @[alu.scala 65:28]
            skip @[alu.scala 60:65]
          else : @[alu.scala 68:64]
            node _T_14 = eq(io.aluc, UInt<3>("h04")) @[alu.scala 68:28]
            node _T_15 = eq(io.aluc, UInt<3>("h04")) @[alu.scala 68:50]
            node _T_16 = or(_T_14, _T_15) @[alu.scala 68:40]
            when _T_16 : @[alu.scala 68:64]
              node _io_output_T_5 = xor(io.in_A, io.in_B) @[alu.scala 69:38]
              node _io_output_T_6 = asSInt(_io_output_T_5) @[alu.scala 69:38]
              io.output <= _io_output_T_6 @[alu.scala 69:27]
              skip @[alu.scala 68:64]
            else : @[alu.scala 70:65]
              node _T_17 = eq(io.aluc, UInt<3>("h05")) @[alu.scala 70:28]
              node _T_18 = eq(io.aluc, UInt<3>("h05")) @[alu.scala 70:51]
              node _T_19 = or(_T_17, _T_18) @[alu.scala 70:40]
              when _T_19 : @[alu.scala 70:65]
                node _shift_T = asUInt(io.in_A) @[alu.scala 72:37]
                node _shift_T_1 = bits(io.in_B, 4, 0) @[alu.scala 72:55]
                node shift = dshr(_shift_T, _shift_T_1) @[alu.scala 72:44]
                node _io_output_T_7 = asSInt(shift) @[alu.scala 73:36]
                io.output <= _io_output_T_7 @[alu.scala 73:27]
                skip @[alu.scala 70:65]
              else : @[alu.scala 74:63]
                node _T_20 = eq(io.aluc, UInt<3>("h06")) @[alu.scala 74:28]
                node _T_21 = eq(io.aluc, UInt<3>("h06")) @[alu.scala 74:50]
                node _T_22 = or(_T_20, _T_21) @[alu.scala 74:39]
                when _T_22 : @[alu.scala 74:63]
                  node _io_output_T_8 = or(io.in_A, io.in_B) @[alu.scala 75:38]
                  node _io_output_T_9 = asSInt(_io_output_T_8) @[alu.scala 75:38]
                  io.output <= _io_output_T_9 @[alu.scala 75:27]
                  skip @[alu.scala 74:63]
                else : @[alu.scala 76:65]
                  node _T_23 = eq(io.aluc, UInt<3>("h07")) @[alu.scala 76:28]
                  node _T_24 = eq(io.aluc, UInt<3>("h07")) @[alu.scala 76:51]
                  node _T_25 = or(_T_23, _T_24) @[alu.scala 76:40]
                  when _T_25 : @[alu.scala 76:65]
                    node _io_output_T_10 = and(io.in_A, io.in_B) @[alu.scala 77:38]
                    node _io_output_T_11 = asSInt(_io_output_T_10) @[alu.scala 77:38]
                    io.output <= _io_output_T_11 @[alu.scala 77:27]
                    skip @[alu.scala 76:65]
                  else : @[alu.scala 78:40]
                    node _T_26 = eq(io.aluc, UInt<4>("h08")) @[alu.scala 78:28]
                    when _T_26 : @[alu.scala 78:40]
                      node _io_output_T_12 = sub(io.in_A, io.in_B) @[alu.scala 79:38]
                      node _io_output_T_13 = tail(_io_output_T_12, 1) @[alu.scala 79:38]
                      node _io_output_T_14 = asSInt(_io_output_T_13) @[alu.scala 79:38]
                      io.output <= _io_output_T_14 @[alu.scala 79:27]
                      skip @[alu.scala 78:40]
                    else : @[alu.scala 80:64]
                      node _T_27 = eq(io.aluc, UInt<4>("h0d")) @[alu.scala 80:28]
                      node _T_28 = eq(io.aluc, UInt<3>("h05")) @[alu.scala 80:51]
                      node _T_29 = or(_T_27, _T_28) @[alu.scala 80:40]
                      when _T_29 : @[alu.scala 80:64]
                        node _io_output_T_15 = bits(io.in_B, 4, 0) @[alu.scala 81:49]
                        node _io_output_T_16 = dshr(io.in_A, _io_output_T_15) @[alu.scala 81:39]
                        io.output <= _io_output_T_16 @[alu.scala 81:27]
                        skip @[alu.scala 80:64]
                      else : @[alu.scala 82:43]
                        node _T_30 = eq(io.aluc, UInt<5>("h01f")) @[alu.scala 82:28]
                        when _T_30 : @[alu.scala 82:43]
                          io.output <= io.in_A @[alu.scala 83:27]
                          skip @[alu.scala 82:43]
    
